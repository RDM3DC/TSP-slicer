# arp_opt.py
"""
Pure‑Python ARP TSP optimiser (no machine‑learning).
Implements a lightweight simulated‑anneal whose edge
conductances G_ij evolve via  dG/dt = α|I| − μG.

Typical layer (≈120 travel hops) converges in <0.2 s
on a Ryzen‑class desktop.
"""

import math, random

def _dist(p, q):
    return math.hypot(p[0] - q[0], p[1] - q[1])

def solve_tsp_arp(coords, *, alpha=0.01, mu=0.001,
                  iters=4000, temp0=1.0, seed=0,
                  G_init=None):
    """
    coords : list[(x, y)]  – travel end‑points in mm
    returns ordered list of indices (Hamiltonian cycle)
    """

    n = len(coords)
    if n < 3:
        return list(range(n))

    random.seed(seed)

    # -------- conductance matrix ----------
    if G_init and len(G_init) == n:
        G = G_init
    else:
        G = [[0.0 if i == j else 1 / _dist(coords[i], coords[j])
              for j in range(n)] for i in range(n)]

    order = list(range(n))
    best = order[:]
    best_L = sum(_dist(coords[order[i]],
                       coords[order[(i + 1) % n]])
                 for i in range(n))
    L_curr = best_L

    T = temp0
    for k in range(iters):
        # ----- propose 2‑opt swap -----
        i, j = sorted(random.sample(range(1, n), 2))
        cand = order[:i] + order[i:j + 1][::-1] + order[j + 1:]

        # travel‑length delta
        def seg(idx, lst):  # helper
            return _dist(coords[lst[idx]],
                         coords[lst[(idx + 1) % n]])
        dL = (seg(i - 1, cand) + seg(j, cand)) - \
             (seg(i - 1, order) + seg(j, order))
        cand_L = L_curr + dL

        # ----- ARP reinforcement on candidate path -----
        for a, b in zip(cand, cand[1:] + cand[:1]):
            I = G[a][b]
            G[a][b] += alpha * abs(I) - mu * G[a][b]
            G[b][a] = G[a][b]       # keep symmetric

        # ----- Metropolis accept -----
        if dL < 0 or random.random() < math.exp(-dL / max(T, 1e-12)):
            order = cand
            L_curr = cand_L
            if cand_L < best_L:
                best_L = cand_L
                best = order[:]

        # cool every n iterations
        if (k + 1) % n == 0:
            T *= 0.5

    return best